{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, HostListener, NgModule } from '@angular/core';\nimport jQuery from 'jquery';\nimport '@optimajet/workflow-designer/dist/workflowdesignerfull.min.js';\nimport moment from 'moment';\nlet WorkflowDesignerService = /*#__PURE__*/(() => {\n  class WorkflowDesignerService {\n    constructor() {}\n    static ɵfac = function WorkflowDesignerService_Factory(t) {\n      return new (t || WorkflowDesignerService)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: WorkflowDesignerService,\n      factory: WorkflowDesignerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WorkflowDesignerService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// @ts-ignore\nwindow.$ = window.jQuery = jQuery;\n// @ts-ignore\nwindow.moment = moment;\n// @ts-ignore\nconst WorkflowDesigner = window.WorkflowDesigner;\nlet WorkflowDesignerComponent = /*#__PURE__*/(() => {\n  class WorkflowDesignerComponent {\n    _ngZone;\n    window;\n    differs;\n    // Class members which could be assigned from outside\n    schemeCode = '';\n    processId = '';\n    designerFolder = '';\n    designerConfig = {\n      renderTo: 'workflow-designer',\n      uploadFormId: 'workflow-uploadform',\n      uploadFileId: 'workflow-uploadfile' //default id value\n    };\n    // Public class members\n    data = undefined;\n    innerDesigner = null;\n    // Private class members\n    uploadCallback = null;\n    uploadType = \"scheme\";\n    resizeTimer = undefined;\n    configDiffer;\n    constructor(_ngZone, window, differs) {\n      this._ngZone = _ngZone;\n      this.window = window;\n      this.differs = differs;\n      this.configDiffer = this.differs.find(this.designerConfig).create();\n    }\n    ngDoCheck() {\n      if (this.configDiffer.diff(this.designerConfig)) {\n        this.redrawDesigner();\n      }\n    }\n    // ------------- Methods for using from other components ------------- //\n    /**\n     * Clears the designer, equivalent of creating empty scheme design\n     */\n    clearScheme() {\n      this.innerDesigner.create();\n    }\n    /**\n     * Get Workflow Designer Errors\n     *\n     * @returns Errors in Workflow Designer\n     */\n    getDesignerErrors() {\n      return this.innerDesigner.validate();\n    }\n    /**\n     * Save Workflow scheme\n     *\n     * @param {function} successCallback Function which will be executed if save was successful\n     * @param {function} errorCallback Function which will be executed if save operation failed\n     */\n    save(successCallback, errorCallback) {\n      this.innerDesigner.schemecode = this.schemeCode;\n      const error = this.getDesignerErrors();\n      if (error != undefined && error.length > 0) {\n        errorCallback(error);\n      } else {\n        this.innerDesigner.save(successCallback);\n      }\n    }\n    /**\n     * Download XML file which contain Workflow Scheme description\n     */\n    downloadScheme() {\n      this.innerDesigner.downloadscheme({\n        name: this.schemeCode\n      });\n    }\n    /**\n     * Download BPMN file which contain BPM description of the scheme\n     */\n    downloadBpmn() {\n      this.innerDesigner.downloadschemeBPMN({\n        name: this.schemeCode\n      });\n    }\n    /**\n     * Upload BPMN or XML file\n     *\n     * @param uploadType {string} Upload type, can be 'scheme' or 'bpmn'\n     * @param {function} callback Function that will be executed after uploading file\n     */\n    upload(uploadType, callback) {\n      this.uploadCallback = callback;\n      this.uploadType = uploadType;\n      this.triggerUploadEvent();\n    }\n    /**\n     * Check for scheme existence by the scheme code from props\n     *\n     * @returns {boolean} If scheme exists true, otherwise, false\n     */\n    isSchemeExist() {\n      const data = {\n        schemecode: this.schemeCode,\n        processid: undefined\n      };\n      return this.innerDesigner.exists(data);\n    }\n    /**\n     * Check for process existence by scheme code\n     * and process id given in props\n     *\n     * @returns {boolean} If process exists true, otherwise, false\n     */\n    isProcessExist() {\n      const data = {\n        schemecode: this.schemeCode,\n        processid: this.processId\n      };\n      return this.innerDesigner.exists(data);\n    }\n    /**\n     * Refresh data in WorkflowDesigner\n     */\n    refresh() {\n      this.innerDesigner.refresh();\n    }\n    // ------------- End of methods for using from other components ------------- //\n    ngAfterViewInit() {\n      this.redrawDesigner();\n    }\n    uploadChange() {\n      const form = document.getElementById(this.designerConfig.uploadFormId);\n      if (this.uploadType === \"bpmn\") {\n        this.innerDesigner.uploadschemeBPMN(form, this.uploadCallback);\n      } else {\n        this.innerDesigner.uploadscheme(form, this.uploadCallback);\n      }\n    }\n    triggerUploadEvent() {\n      const file = document.getElementById(this.designerConfig.uploadFileId);\n      if (file) {\n        file.click();\n      }\n    }\n    graphSize() {\n      const {\n        widthDiff,\n        heightDiff\n      } = this.designerConfig;\n      return {\n        width: window.innerWidth - (widthDiff ?? 0),\n        height: window.innerHeight - (heightDiff ?? 0)\n      };\n    }\n    resizeDesigner() {\n      if (this.resizeTimer) {\n        clearTimeout(this.resizeTimer);\n        this.resizeTimer = undefined;\n      }\n      this.resizeTimer = setTimeout(() => {\n        const {\n          width,\n          height\n        } = this.graphSize();\n        this.innerDesigner.resize(width, height);\n      }, 150);\n    }\n    redrawDesigner() {\n      const designerDiv = document.getElementById(this.designerConfig.renderTo);\n      if (this.schemeCode === '' && this.processId === '') {\n        return;\n      }\n      if (!designerDiv) {\n        return;\n      }\n      const designerConfig = {\n        ...this.designerConfig,\n        renderTo: this.designerConfig.renderTo,\n        graphwidth: this.graphSize().width,\n        graphheight: this.graphSize().height\n      };\n      this._ngZone.runOutsideAngular(() => {\n        if (this.innerDesigner) {\n          this.processExistingDesigner(designerConfig);\n        } else {\n          this.createNewDesigner(designerConfig);\n        }\n      });\n    }\n    processExistingDesigner(config) {\n      const data = this.innerDesigner?.data;\n      const schemecode = this.innerDesigner?.schemecode;\n      this.innerDesigner?.destroy();\n      this.innerDesigner = this.getWorkflowDesigner(config);\n      this.innerDesigner.schemecode = schemecode;\n      if (!data) {\n        this.loadScheme();\n      } else {\n        this.innerDesigner.data = data;\n        this.innerDesigner.render();\n      }\n    }\n    createNewDesigner(config) {\n      this.innerDesigner = this.getWorkflowDesigner(config);\n      this.loadScheme();\n    }\n    getWorkflowDesigner(config) {\n      return new WorkflowDesigner(config);\n    }\n    loadScheme() {\n      let data = {\n        schemecode: this.schemeCode,\n        processid: this.processId,\n        readonly: this.processId != undefined && this.processId != \"\"\n      };\n      const callback = () => {\n        this.data = this.innerDesigner.data;\n      };\n      const loadData = new Promise((resolve, reject) => {\n        if (this.innerDesigner.exists(data)) {\n          this.innerDesigner.load(data, resolve);\n        } else {\n          this.innerDesigner.create(this.schemeCode);\n        }\n      });\n      loadData.then(callback);\n    }\n    static ɵfac = function WorkflowDesignerComponent_Factory(t) {\n      return new (t || WorkflowDesignerComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(Window), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: WorkflowDesignerComponent,\n      selectors: [[\"workflow-designer\"]],\n      hostBindings: function WorkflowDesignerComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"resize\", function WorkflowDesignerComponent_resize_HostBindingHandler() {\n            return ctx.resizeDesigner();\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      inputs: {\n        schemeCode: \"schemeCode\",\n        processId: \"processId\",\n        designerFolder: \"designerFolder\",\n        designerConfig: \"designerConfig\"\n      },\n      decls: 3,\n      vars: 4,\n      consts: [[3, \"id\"], [\"action\", \"\", \"method\", \"post\", \"encType\", \"multipart/form-data\", 2, \"display\", \"none\", 3, \"id\"], [\"type\", \"file\", 3, \"name\", \"id\", \"change\"]],\n      template: function WorkflowDesignerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n          i0.ɵɵelementStart(1, \"form\", 1)(2, \"input\", 2);\n          i0.ɵɵlistener(\"change\", function WorkflowDesignerComponent_Template_input_change_2_listener() {\n            return ctx.uploadChange();\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵpropertyInterpolate(\"id\", ctx.designerConfig.renderTo);\n          i0.ɵɵadvance(1);\n          i0.ɵɵpropertyInterpolate(\"id\", ctx.designerConfig.uploadFormId);\n          i0.ɵɵadvance(1);\n          i0.ɵɵpropertyInterpolate(\"name\", ctx.designerConfig.uploadFileId);\n          i0.ɵɵpropertyInterpolate(\"id\", ctx.designerConfig.uploadFileId);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return WorkflowDesignerComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet WorkflowDesignerModule = /*#__PURE__*/(() => {\n  class WorkflowDesignerModule {\n    static ɵfac = function WorkflowDesignerModule_Factory(t) {\n      return new (t || WorkflowDesignerModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: WorkflowDesignerModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: Window,\n        useValue: window\n      }]\n    });\n  }\n  return WorkflowDesignerModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of workflow-designer-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { WorkflowDesignerComponent, WorkflowDesignerModule, WorkflowDesignerService };\n//# sourceMappingURL=optimajet-workflow-designer-angular.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}